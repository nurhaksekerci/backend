# Generated by Django 5.1.4 on 2025-01-08 17:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Silinmiş mi?')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Silinme Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('name', models.CharField(max_length=255, verbose_name='Şirket Adı')),
                ('address', models.TextField(verbose_name='Şirket Adresi')),
                ('tax_number', models.CharField(max_length=11, verbose_name='Vergi Numarası')),
                ('tax_office', models.CharField(max_length=255, verbose_name='Vergi Dairesi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif mi?')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_logos/', verbose_name='Şirket Logosu')),
                ('phone', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message="Telefon numarası '+90' ile başlamalı ve 10 haneli olmalıdır.", regex='^\\+?90?\\d{10}$')], verbose_name='Telefon Numarası')),
                ('email', models.EmailField(max_length=254, verbose_name='E-posta Adresi')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Web Sitesi')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='Facebook')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='Twitter')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='LinkedIn')),
                ('subscription_start_date', models.DateField(verbose_name='Abonelik Başlangıç Tarihi')),
                ('subscription_end_date', models.DateField(verbose_name='Abonelik Bitiş Tarihi')),
                ('is_subscription_active', models.BooleanField(default=True, verbose_name='Abonelik Aktif mi?')),
                ('branch_limit', models.PositiveIntegerField(default=1, verbose_name='Şube Açma Hakkı')),
            ],
            options={
                'verbose_name': 'Şirket',
                'verbose_name_plural': 'Şirketler',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, unique=True, verbose_name='Para Birimi Kodu')),
                ('name', models.CharField(max_length=50, verbose_name='Para Birimi Adı')),
                ('symbol', models.CharField(max_length=5, verbose_name='Sembol')),
            ],
            options={
                'verbose_name': 'Para Birimi',
                'verbose_name_plural': 'Para Birimleri',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Dil Adı')),
                ('code', models.CharField(max_length=2, unique=True, verbose_name='Dil Kodu')),
            ],
            options={
                'verbose_name': 'Dil',
                'verbose_name_plural': 'Diller',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Silinmiş mi?')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Silinme Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('name', models.CharField(max_length=255, verbose_name='Şube Adı')),
                ('address', models.TextField(verbose_name='Şube Adresi')),
                ('phone', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message="Telefon numarası '+90' ile başlamalı ve 10 haneli olmalıdır.", regex='^\\+?90?\\d{10}$')], verbose_name='Telefon Numarası')),
                ('email', models.EmailField(max_length=254, verbose_name='E-posta Adresi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif mi?')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='authentication.company', verbose_name='Şirket')),
            ],
            options={
                'verbose_name': 'Şube',
                'verbose_name_plural': 'Şubeler',
            },
        ),
        migrations.AddField(
            model_name='company',
            name='currencies',
            field=models.ManyToManyField(related_name='companies', to='authentication.currency', verbose_name='Kullanılan Para Birimleri'),
        ),
        migrations.AddField(
            model_name='company',
            name='default_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_currency_companies', to='authentication.currency', verbose_name='Varsayılan Para Birimi'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Silinmiş mi?')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Silinme Tarihi')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Profil Resmi')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Doğum Tarihi')),
                ('phone', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Telefon numarası '+90' ile başlamalı ve 10 haneli olmalıdır.", regex='^\\+?90?\\d{10}$')], verbose_name='Telefon Numarası')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name='İşe Başlama Tarihi')),
                ('driving_license', models.CharField(choices=[('YOK', 'Yok'), ('B', 'B Sınıfı'), ('D1', 'D1 Sınıfı'), ('D', 'D Sınıfı'), ('E', 'E Sınıfı')], default='YOK', max_length=3, verbose_name='Ehliyet Sınıfı')),
                ('gender', models.CharField(blank=True, choices=[('E', 'Erkek'), ('K', 'Kadın'), ('D', 'Diğer')], max_length=1, null=True, verbose_name='Cinsiyet')),
                ('is_company_admin', models.BooleanField(default=False, verbose_name='Şirket Yetkilisi mi?')),
                ('is_branch_admin', models.BooleanField(default=False, verbose_name='Şube Yetkilisi mi?')),
                ('role', models.CharField(blank=True, choices=[('GENEL_MUDUR', 'Genel Müdür'), ('SUBE_MUDURU', 'Şube Müdürü'), ('OPERASYON_MUDURU', 'Operasyon Müdürü'), ('OPERASYON_SEFI', 'Operasyon Şefi'), ('OPERASYON_UZMANI', 'Operasyon Uzmanı'), ('OPERASYON_ELEMANI', 'Operasyon Elemanı'), ('SATIS_MUDURU', 'Satış Müdürü'), ('SATIS_SEFI', 'Satış Şefi'), ('REZ_SEFI', 'Rezervasyon Şefi'), ('SATIS_TEMSILCI', 'Satış Temsilcisi'), ('REZ_GOREVLI', 'Rezervasyon Görevlisi'), ('BAS_REHBER', 'Baş Rehber'), ('REHBER', 'Rehber'), ('STAJYER_REHBER', 'Stajyer Rehber'), ('TRANSFER_KOOR', 'Transfer Koordinatörü'), ('SOFOR', 'Şoför'), ('HOSTES', 'Hostes'), ('MUH_MUDURU', 'Muhasebe Müdürü'), ('MUH_UZMANI', 'Muhasebe Uzmanı'), ('MUH_ELEMANI', 'Muhasebe Elemanı'), ('IK_MUDURU', 'İK Müdürü'), ('IK_UZMANI', 'İK Uzmanı'), ('PAZ_MUDURU', 'Pazarlama Müdürü'), ('PAZ_UZMANI', 'Pazarlama Uzmanı'), ('SOSYAL_MEDYA', 'Sosyal Medya Uzmanı'), ('STAJYER', 'Stajyer')], max_length=25, null=True, verbose_name='Rolü')),
                ('tckn', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='TCKN 11 haneli olmalıdır.', regex='^\\d{11}$')], verbose_name='TC Kimlik Numarası')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adres')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Acil Durumda Aranacak Kişi')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(message="Telefon numarası '+90' ile başlamalı ve 10 haneli olmalıdır.", regex='^\\+?90?\\d{10}$')], verbose_name='Acil Durum Telefonu')),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Yakınlık Derecesi')),
                ('blood_type', models.CharField(blank=True, choices=[('0_pozitif', '0 Rh+'), ('0_negatif', '0 Rh-'), ('A_pozitif', 'A Rh+'), ('A_negatif', 'A Rh-'), ('B_pozitif', 'B Rh+'), ('B_negatif', 'B Rh-'), ('AB_pozitif', 'AB Rh+'), ('AB_negatif', 'AB Rh-')], max_length=10, null=True, verbose_name='Kan Grubu')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Departman')),
                ('annual_leave_days', models.PositiveIntegerField(default=14, verbose_name='Yıllık İzin Günü')),
                ('remaining_leave_days', models.PositiveIntegerField(default=14, verbose_name='Kalan İzin Günü')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Maaş')),
                ('performance_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Performans Puanı')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Son Giriş IP Adresi')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='authentication.branch', verbose_name='Şube')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='authentication.company', verbose_name='Şirket')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to='authentication.user', verbose_name='Silen Kullanıcı')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('salary_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employee_salaries', to='authentication.currency', verbose_name='Maaş Para Birimi')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Kullanıcı',
                'verbose_name_plural': 'Kullanıcılar',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='authentication.user', verbose_name='Oluşturan Kullanıcı'),
        ),
        migrations.AddField(
            model_name='company',
            name='deleted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to='authentication.user', verbose_name='Silen Kullanıcı'),
        ),
        migrations.AddField(
            model_name='company',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='authentication.user', verbose_name='Güncelleyen Kullanıcı'),
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Silinmiş mi?')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Silinme Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('name', models.CharField(max_length=255, verbose_name='Sertifika Adı')),
                ('file', models.FileField(upload_to='certificates/', verbose_name='Sertifika Dosyası')),
                ('issue_date', models.DateField(verbose_name='Verilme Tarihi')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Geçerlilik Tarihi')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='authentication.user', verbose_name='Oluşturan Kullanıcı')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to='authentication.user', verbose_name='Silen Kullanıcı')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='authentication.user', verbose_name='Güncelleyen Kullanıcı')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='authentication.user', verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Sertifika',
                'verbose_name_plural': 'Sertifikalar',
            },
        ),
        migrations.AddField(
            model_name='branch',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='authentication.user', verbose_name='Oluşturan Kullanıcı'),
        ),
        migrations.AddField(
            model_name='branch',
            name='deleted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to='authentication.user', verbose_name='Silen Kullanıcı'),
        ),
        migrations.AddField(
            model_name='branch',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='authentication.user', verbose_name='Güncelleyen Kullanıcı'),
        ),
        migrations.CreateModel(
            name='UserLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency', models.CharField(choices=[('baslangic', 'Başlangıç'), ('orta', 'Orta'), ('iyi', 'İyi'), ('ileri', 'İleri'), ('anadil', 'Anadil')], max_length=10, verbose_name='Yeterlilik Seviyesi')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.language', verbose_name='Dil')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='authentication.user', verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Kullanıcı Dil Bilgisi',
                'verbose_name_plural': 'Kullanıcı Dil Bilgileri',
                'unique_together': {('user', 'language')},
            },
        ),
    ]
